/**
 * Implements simple cellular automaton game.
 * This game allows the user to run Conway's Game of Life simulation.
 * At the beginning, user defines the starting pattern for game.
 * During the simulation, user can pause game at any moment and modify the pattern.
 */

class CellularGame {
    field Crosshair crosshair;

    constructor CellularGame new() {
        do Graphics.drawFrame(2, 2, 124, 253);
        let crosshair = Crosshair.new(0, 0);
        do crosshair.draw();
        return this;
    }

    method void dispose() {
        do crosshair.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Runs the game, handles user input. */
    method void run() {
        var char key;
        var boolean exit;
        let exit = false;
      
        while (~exit) {
         // waits for a key to be pressed
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }
        //space - place/remove cell
        // wsad - move
        //p - pause
        //o - resume
        //c - clear
        //b - quit
        if (key = 66)   { let exit = true; }     // b - quit
        if (isWSAD(key)) { do moveCrosshair(key); } // move crosshair on w, s, a, d

         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
        }
    }
        do Screen.clearScreen();
        return;
    }

    method boolean isWSAD(char key) {
        return ((key = 87) | (key = 83) | (key = 65) | (key = 68));
    }

    method void moveCrosshair(char key) {
        while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            if (key = 87)   { do crosshair.moveUp(); } // w = move crosshair up
            if (key = 83)   { do crosshair.moveDown(); }// s = move crosshair down
            if (key = 65)   { do crosshair.moveLeft(); } // a = move crosshair left
            if (key = 68)   { do crosshair.moveRight(); } // d = move crosshair right
            do Sys.wait(100);
        }
        return;
    }
}
