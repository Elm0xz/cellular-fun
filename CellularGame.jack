/**
 * Implements simple cellular automaton game.
 * This game allows the user to run Conway's Game of Life simulation.
 * At the beginning, user defines the starting seed for game.
 * During the simulation, user can pause game at any moment and modify the pattern.
 */
        //w, s, a, d - move crosshair
        //space - place/remove cell
        //p - pause
        //o - resume/start
        //c - clear
        //b - quit

class CellularGame {
    field Crosshair crosshair;
    field Board board;
    field Menu menu;

    constructor CellularGame new() {
        do initMenu();
        do initBoard();
        do initCrosshair();
        return this;
    }

    method void dispose() {
        do crosshair.dispose();
        do board.dispose();
        do menu.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Initializes game menu. */
    method void initMenu() {
        let menu = Menu.new();
        do menu.drawMainMenu();        
        return;
    }

    /** Initializes game crosshair. Crosshair is used to place/remove cells. */
    method void initCrosshair() {
        let crosshair = Crosshair.new(0, 0);
        do crosshair.draw(false);
        return;
    }

    /** Initializes game board. */
    method void initBoard() {
        let board = Board.new();
        return;
    }

    /** Runs the game, handles user input. */
    method void run() {
        var char key;
        var boolean exit, active;
        let exit = false;
        let active = false;
      
        while (~exit) {
        // waits for a key to be pressed
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }
            if (key = 79) { // o - start/resume game
                let active = true;
                do menu.drawGameMenu();
                do crosshair.erase(board.getCellState(crosshair.getX(), crosshair.getY()));
                while (active) {
                    do nextGeneration();
                    let key = Keyboard.keyPressed();
                    if (key = 80) {
                        let active = false; // p - stop game
                        do menu.drawMainMenu();
                        do crosshair.draw(board.getCellState(crosshair.getX(), crosshair.getY()));
                    }
                }
            }
            if (key = 66) { let exit = true; } // b - quit game
            while (isWSAD(key)) { 
                let key = Keyboard.keyPressed();
                do moveCrosshair(key); // move crosshair on w, s, a, d
            }
            if (key = 32) { // space - toggle cell value
                do board.toggleCell(crosshair.getX(), crosshair.getY());
                do board.draw();
                do crosshair.draw(board.getCellState(crosshair.getX(), crosshair.getY()));
            }
            if (key = 67) { // c - clear the game board
                do board.clear(); 
                do crosshair.draw(false);
            } 

        // waits for the key to be released
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
            }
        }
        do Screen.clearScreen();
        return;
    }

    method boolean isWSAD(char key) {
        return ((key = 87) | (key = 83) | (key = 65) | (key = 68));
    }

    /** Moves crosshair on w, s, a, d. */
    method void moveCrosshair(char key) {

        if (board.getCellState(crosshair.getX(), crosshair.getY())) {
            do board.drawCell(crosshair.getX(), crosshair.getY(), true);
        }
        if (key = 87) { // w = move crosshair up
            do crosshair.erase(board.getCellState(crosshair.getX(), crosshair.getY()));
            do crosshair.moveUp(); 
            do crosshair.draw(board.getCellState(crosshair.getX(), crosshair.getY()));
            } 
        if (key = 83) { // s = move crosshair down
            do crosshair.erase(board.getCellState(crosshair.getX(), crosshair.getY()));
            do crosshair.moveDown();
            do crosshair.draw(board.getCellState(crosshair.getX(), crosshair.getY()));
            }
        if (key = 65) { // a = move crosshair left
            do crosshair.erase(board.getCellState(crosshair.getX(), crosshair.getY()));
            do crosshair.moveLeft();
            do crosshair.draw(board.getCellState(crosshair.getX(), crosshair.getY()));
            } 
        if (key = 68) { // d = move crosshair right
            do crosshair.erase(board.getCellState(crosshair.getX(), crosshair.getY()));
            do crosshair.moveRight();
            do crosshair.draw(board.getCellState(crosshair.getX(), crosshair.getY()));
            } 
        if (board.getCellState(crosshair.getX(), crosshair.getY())) {
            do board.drawCell(crosshair.getX(), crosshair.getY(), true);
            do crosshair.draw(true);
        }
        do Sys.wait(140);
        return;
    }

    method void nextGeneration() {
        do board.nextGeneration();
        do board.draw();
        do Sys.wait(1000);
        return;
    }
}
